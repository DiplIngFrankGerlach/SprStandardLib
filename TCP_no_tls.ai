Import
{
   "Strings.ad",
   "System.ad",
   "TCP_no_tls.ad"

}


Socket::Socket(int handle)
{
  var TCPInit* init=new TCPInit;
  _handle=handle;
}




/* setze die Abbruchzeit auf 30s ohne Verkehr */
void Socket::setzeTimeout()
{
    var PrintfClass pfc;
    var int fehlerEmpfangen = 0;
    var int fehlerSenden = 0;
    inline_cpp[[
       struct timeval timeout;      
       timeout.tv_sec = 30;
       timeout.tv_usec = 0;

       #ifdef WINDOWS_SPR
          cout << "Socket::setzeTimeout() auf Windows nicht realisiert" << endl;
       #else
          if (setsockopt (_handle, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof timeout) < 0)
          {
             fehlerEmpfangen = 1;
          }

          if (setsockopt (_handle, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof timeout) < 0)
          {
             fehlerSenden = 1; 
          }
       #endif
    ]]
    if(fehlerEmpfangen) {pfc.fstr("setsockopt timeout=10s(empfangen) fehlgeschlagen\n");}
    if(fehlerSenden) {pfc.fstr("setsockopt timeout=10s(senden) fehlgeschlagen\n");}
}

int Socket::recv(&char buffer[],int maxCount)
{
   var int ret = -1;
   if(maxCount > buffer.sz)
   {
      buffer[0] = 'X';//safety
      buffer[1] = cast(char,0);//safety
      return -2;
   }
   inline_cpp[[
      ret=::recv(_handle,buffer._array,maxCount,0);
   ]]
   return ret;
}

int Socket::recv(*char buffer[],int maxCount)
{
   var int ret = -1;
   if(maxCount>buffer.sz)
   {
      buffer[0] = 'X';//safety
      buffer[1] = cast(char,0);//safety
      return -2;
   }
   inline_cpp[[
         ret=::recv(_handle,buffer._theObject->_array,maxCount,0);
   ]]
   return ret;
}
    
int Socket::send(&char buffer[],int count)
{
   var int ret;
   if(count>buffer.sz)
   {
      buffer[0] = 'X';//safety
      buffer[1] = cast(char,0);//safety
      return -2;
   }
   inline_cpp[[
     ret=0;
     while(ret<count)
     {
        int ret2;
        ret2 = ::send(_handle,buffer._array+ret,count-ret,0);
        if(ret2<=0)
        {
           return -1;
        }
        ret=ret+ret2;
     }
   ]]
   return ret;
}


int Socket::send(*char buffer[],int count)
{
   var int ret;
   if(count>buffer.sz)
   {
      buffer[0] = 'X';//safety
      buffer[1] = cast(char,0);//safety
      return -2;
   }
   inline_cpp[[
     ret=0;
     while(ret<count)
     {
        int ret2;
        ret2=::send(_handle,buffer._theObject->_array+ret,count-ret,0);
        if(ret2<=0)
        {
           return -1;
        }
        ret=ret+ret2;
     }
   ]]
   return ret;
}


void Socket::close()
{
    inline_cpp[[
       if(_handle != 0)
       {
          #ifdef WINDOWS_SPR
             shutdown(_handle,0);
          #endif 
          #if defined(GCC_X86) || defined(__clang__)
             ::close(_handle);
          #endif
          _handle = 0;
       }
   ]]
        
}


void SimpleSocket::connect(&char serverName[],int port,&int socketHandle)
{  
   var int ipaddr=0;
   
   inline_cpp[[
       struct sockaddr_in server_addr;
       struct addrinfo hints, *res;
        
       
       // Set up the hints structure for getaddrinfo
       memset(&hints, 0, sizeof(hints));
       hints.ai_family = AF_INET; // Use IPv4
       hints.ai_socktype = SOCK_STREAM; // Use TCP

       // Get address info for the server domain
       if (getaddrinfo(serverName._array, nullptr, &hints, &res) != 0) 
       {
           std::cerr << "Failed to resolve hostname\n";
           socketHandle = -1;
           return;
       }

       // Create socket
       if ((socketHandle = ::socket(AF_INET, SOCK_STREAM, 0)) < 0) 
       {
           std::cerr << "Socket creation error\\n";
           socketHandle = -2;
           return;
       }

       // Set up the server address using the resolved IP address
       server_addr.sin_family = AF_INET;
       server_addr.sin_port = htons(port);
       server_addr.sin_addr = ((struct sockaddr_in*)res->ai_addr)->sin_addr;

       // Free the addrinfo structure
       freeaddrinfo(res);

       // Connect to the server
       if (::connect(socketHandle, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) 
       {
           std::cerr << "Connection Failed\\n";
           socketHandle = -3;
       }
   ]]
  
}
    
SimpleSocket::SimpleSocket(int socketHandle)
{
   _handle = socketHandle;
   readBuffer = new char[4096]; 
   readBufferLeseZeiger = 0;
   readBufferGueltig = 0;
}

/*receive data from the socket */
int SimpleSocket::receive(&String_16 data)
{
   data.clear();

   var char zeichen;
   var int ret = this.receiveChar(zeichen);
   if(ret != 1) { return -1;}

   do
   {
      data.append(zeichen);
      ret = this.receiveChar(zeichen);
   }
   while(ret == 1);
   return 1;
}
    
    
/*Fully send a string over the socket */
int SimpleSocket::sendFully(&String_16 data)
{
   var int groesse = data.length();
   var char buffer[4096];
   var int gesendet = 0;
   
   var int ausgabeZeiger = 0;
    
   while(gesendet < groesse )
   {
       var int i=0;       
       while( (i < buffer.sz) && (ausgabeZeiger < groesse) )
       {
          buffer[i] = data.getAt(ausgabeZeiger);
          i++;
          ausgabeZeiger++;
       }
       var int ret= -1;
       inline_cpp[[ ret = ::send(_handle,buffer._array,i,0); ]]
       if( ret > 0)
       { gesendet = gesendet + ret; }
       else
       { return -1; }
   }
   return 1;
}
    
void SimpleSocket::close(int socketHandle)
{
   inline_cpp[[ 
     #ifdef WINDOWS_SPR
       ::closesocket(socketHandle);
     #else
       ::close(socketHandle);
     #endif     
   ]]
}

/* read one character out of the read buffer, return -1 if socket does not return anything any more */
int SimpleSocket::receiveChar(&char zeichen)
{
    if( readBufferLeseZeiger == readBufferGueltig )
    {
         var int ret;
         inline_cpp
         [[
               ret = ::recv(_handle,readBuffer._theObject->_array,readBuffer._theObject->_sz - 1,0);
         ]]
         if( ret > 0)
         {
            readBufferGueltig = ret;
            readBufferLeseZeiger = 0;            
         }
         else
         {
            return -1;
         }
    }
    zeichen = readBuffer[readBufferLeseZeiger];
    readBufferLeseZeiger++;
    return 1;
}

/* receive at least one line of data from the socket.
   In case of "\r\n", the "\r" will also be consumed as a line  
   delimiter.
 */
int SimpleSocket::receiveLine(&String_16 data)
{
   data.clear();
   
   var char zeichen;
   var int ret = this.receiveChar(zeichen);

   if( ret < 1 ) { return -1;}

   do
   {  
      if( ret == 1 )
      {
          if( zeichen == '\n')
          {
             return 1;
          }
          if( zeichen == '\r')
          {
             ret = this.receiveChar(zeichen);
             if( ret == 1)
             {
                if( zeichen == '\n')
                {
                   return 1;
                }
             }
             else { return 1;}
          }
          data.append(zeichen);
      }
      else
      {
         return 1;
      }
      ret = this.receiveChar(zeichen);
   }
   while(1==1);
   
   return -1;
}


void SimpleSocket::UnitTest()
{
   var PrintfClass pfc;
   var int socketHandle = -1;
   SimpleSocket::connect("di-fg.de",80,socketHandle);
   
   if( socketHandle < 1)
   {
      pfc.fstr("Fehler 1 in SimpleSocket::UnitTest()").pr();
      return;
   }
   var SimpleSocket* sis = new SimpleSocket(socketHandle);
   var String_16 httpCommand("GET / HTTP/1.1\r\n");
   httpCommand.append("Host: di-fg.de\r\n");
   httpCommand.append("\r\n");
   
   if( sis.sendFully(httpCommand) != 1)
   {
      pfc.fstr("Fehler 2 in SimpleSocket::UnitTest()").pr();
      return;
   }
   
   var String_16 antwort;
   var int gelesen = 0;
   
   var String_16 zeile;
   while ( (sis.receiveLine(zeile) >= 0) && (zeile.length() > 0) )
   {     
      pfc.fstr("Zeile: $").sa(zeile).pr(); 
   }
   
   
   pfc.fstr("gelesen:").prNoLF();
   do
   {
      var int ret = sis.receive(antwort);
      if( ret < 1 )
      {
         pfc.fstr("Fehler 3 in SimpleSocket::UnitTest()").pr();
         return;
      }
      pfc.fstr("$").sa(antwort).prNoLF();
      gelesen = gelesen + ret;
   }
   while(gelesen < 2295);//Achtung: Wert muss angepasst werden !
   pfc.pr("");
}


   



ServerSocket::ServerSocket(int ipaddr,int port)
{
    var TCPInit* init=new TCPInit;
    inline_cpp[[
       _serverHandle=socket(AF_INET,SOCK_STREAM,0);
       sockaddr_in sock_str;
       sock_str.sin_family=AF_INET;
       sock_str.sin_addr.s_addr=htonl(ipaddr);
       sock_str.sin_port=htons(port);
       int on = 1;
       #if defined(GCC_X86) || defined(__clang__)
       if (setsockopt(_serverHandle, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) < 0)
       {
          perror("setsockopt(SO_REUSEADDR) failed");
       }
       #endif

       if(bind(_serverHandle,(struct sockaddr*)&sock_str,sizeof(sock_str))<0)
       {
          #ifdef WINDOWS_SPR
          printf("error during bind() %u\\n",WSAGetLastError());
          #else
          printf("error during bind() errno:%u\\n",errno);
          #endif
         _error=-1;
       }
       if(listen(_serverHandle,10)<0)
       {
         _error=-2;         
       }
    ]]
}


Socket* ServerSocket::accept()
{
  
   var int handle;
   inline_cpp[[
      struct sockaddr_in sock_str_remote; 
      #if defined(GCC_X86) || defined(__clang__)
         socklen_t 
      #else
   	 int
      #endif
      len=sizeof(struct sockaddr_in);
      handle=::accept(_serverHandle,(struct sockaddr*)&sock_str_remote,&len);
      if(handle<=0)
      {
         printf("Error in accept() errno:%u\\n",errno);
      }
   ]]
   return new Socket(handle);   
}

Socket::Socket(&String_16 server,int destinationPort,int ist_https)
{
  _handle = 0;
  if(ist_https == 0)
  {
      var int ipaddr=0;
      var char serverPuffer[256];
      server.toCharArray(serverPuffer);
      serverPuffer[255] = cast(char,0);//sicherheitshalber
      inline_cpp[[
           hostent* he;
           he=gethostbyname(serverPuffer._array);
           if(he != NULL)
           {
               char* ap=he->h_addr_list[0];//improvement to balance load possible
               for(int i=0;i<4;i++)
               {
                  int onebyte=ap[i];
                  onebyte=onebyte&255;
                  ipaddr=ipaddr | onebyte;
                  if(i<3)
                  {
                     ipaddr=ipaddr<<8;
                  }
               }
               char x;
               this->open_internal(&x,ipaddr,destinationPort);
           }
      ]]
  }
}

Socket::Socket(int destinationIP,int destinationPort)
{
  _handle = 0;
  this.open_internal(destinationIP,destinationPort);
}

void Socket::open_internal(int destinationIP,int destinationPort)
{
    var TCPInit* init=new TCPInit;
    inline_cpp[[
       _handle=socket(AF_INET,SOCK_STREAM,0);
       #ifdef WINDOWS_SPR
       if(_handle<=0)printf("error during socket() %u\n",WSAGetLastError());
       #else
       if(_handle<=0)printf("error during socket() errno:%u\n",errno);
       #endif
       sockaddr_in sock_str;
       sock_str.sin_family=AF_INET;
       sock_str.sin_addr.s_addr=htonl(destinationIP);
       sock_str.sin_port=htons((short)destinationPort);              
       int ret=connect(_handle,(struct sockaddr*)&sock_str,sizeof(sock_str));
       if(ret<0)
       {
   	   #ifdef WINDOWS_SPR
   	   printf("error during connect() %u\n",WSAGetLastError());
   	   #else
   	   printf("error during connect() errno:%u\n",errno);
   	   #endif
       }
             
    ]]
}

/* When a socket is used in more than one thread, it can
   become unusable, because the Mutex of Socket class blocks
   any other operation, including just updating the
   reference count */
void Socket::sendFromOtherThread(int socketHandle,&String_16 zuSenden)
{
    var int gesendet = 0;
    var int zuSendenLaenge = zuSenden.length();
    if(zuSendenLaenge > 4095)
    {
       inline_cpp[[ cout << "Socket::sendFromOtherThread() String zu gross !" << endl; ]]
       return;
    }
    //inline_cpp[[cout << "Socket::sendFromOtherThread" << endl;]]
    var char buffer[4096];
    zuSenden.toCharArray(buffer);//todo: auch fuer groessere Strings !


    while(gesendet < zuSendenLaenge)
    {
       inline_cpp[[
           int ret = ::send(socketHandle,&(buffer._array[gesendet]),zuSendenLaenge - gesendet,0);
           if( ret > 0) gesendet += ret;
           else return;
       ]]
    }
}

TCPInit::TCPInit()
{
  this. perform();  
}

void TCPInit::perform()
{
   if(__singleton==NULL)
   {
       __singleton=this;
       inline_cpp[[
         #ifdef WINDOWS_SPR
          WSADATA wsaData;
          int ret=WSAStartup(0x0101,&wsaData);
          //printf("WSAStartup ret code=%i\\n",ret);
          #endif


       ]]
   }
} 

void TCPInit::threadMain()   
{
}



void Socket::threadMain(){}


int Socket::sendString(&String_16 str)
{
   var char buffer[2048];
   var int zeiger=0;
   var int l=str.length();
   while(zeiger<l)
   {
      var int zeiger2=0;
      while((zeiger<l) && (zeiger2<buffer.sz) )
      {
         buffer[zeiger2]=str.getAt(zeiger);
         zeiger++;
         zeiger2++;
      }
      if( this.send(buffer,zeiger2) < 1 )
      {
        return -1;
      }
   }
   return l;
}

int Socket::isConnected()
{
  if(_handle >0){return 1;}
  return 0;
}



BufferedSocket::BufferedSocket(&String_16 host,int port)
{
	  var TCPInit* init=new TCPInit;
	  _socket=new Socket(host,port,0);
	  _readBuffer=new char[4096];
	  _readPtr=0;
	  _writeBuffer=new char[4096];
	  _validReadBytes=0;
	  _validWriteBytes=0;
}

BufferedSocket::BufferedSocket(Socket* s)
{
	  var TCPInit* init=new TCPInit;
	  _socket=s;
	  _readBuffer=new char[4096];
	  _readPtr=0;
	  _writeBuffer=new char[4096];
	  _validReadBytes=0;
	  _validWriteBytes=0;
}

int BufferedSocket::recvChar(&char ret)
{
	 if(_readPtr>=_validReadBytes)
	 {
		  _readPtr=0;
		  var int rets;
		  rets = _socket.recv(_readBuffer,_readBuffer.sz);
		  if( rets <= 0 )
		  {
			  _validReadBytes = 0;
			  ret = cast(char,0);
			  return -1;
		  }
		  else
		  {
			  _validReadBytes = rets;
		  }
	 }
	 ret=_readBuffer[_readPtr];
	 _readPtr++;
	 return 1;
}


int BufferedSocket::receive(&char feld[],int n)
{
	if(n > feld.sz)
	{ return -2;}
	if(_readPtr>=_validReadBytes)
	{
		 var int rets;
		 rets = _socket.recv(feld,n);
		 if( rets <= 0 )
		 {
			 return -1;
		 }
		 else
		 {
			 return rets;
		 }
	}
	else
	{
		var int ausgStelle = 0;
		while( (_readPtr < _validReadBytes) && (ausgStelle < n))
		{
			  feld[ausgStelle] = _readBuffer[_readPtr];
			  _readPtr++;
			  ausgStelle++;
		}
		return ausgStelle;
	}
	return -1;
}

int BufferedSocket::receive(*char feld[],int n)
{
	if(n > feld.sz)
	{ return -2;}
	if(_readPtr>=_validReadBytes)
	{
		 var int rets;
		 rets = _socket.recv(feld,n);
		 if( rets <= 0 )
		 {
			 return -1;
		 }
		 else
		 {
			 return rets;
		 }
	}
	else
	{
		var int ausgStelle = 0;
		while( (_readPtr < _validReadBytes) && (ausgStelle < n))
		{
			  feld[ausgStelle] = _readBuffer[_readPtr];
			  _readPtr++;
			  ausgStelle++;
		}
		return ausgStelle;
	}
	return -1;
}

int BufferedSocket::readWord(&String_16 wort,char trenner1,char trenner2)
{
	var PrintfClass pfc;
	wort.clear();
	var char z;
	while((this.recvChar(z) == 1) && (z != trenner1) && (z != trenner2))
	{
		 pfc.fstr("BufferedSocket::readWord lese $").sa(z).pr();
		 wort.append(z);
	}

	if(wort.length() > 0) {return 1;}

	return 0;
}


int BufferedSocket::send(&String_16 str)
{
	var char puffer[1000];
	var int stelle = 0;
	var int l = str.length();
	while(stelle < l)
	{
		 var int i=0;
		 while((stelle < l) && (i < 1000)) 
		 {
			 puffer[i] = str.getAt(stelle);
			 i++;
			 stelle++;
		 }
		 var int ret  = this.send(puffer,i);
		 if(ret < 0){ return ret; }
	}
	return 1;
}


int BufferedSocket::send(&char outbuf[],int valid)
{
  var int optr=0;
  do
  {
	  var int frei=_writeBuffer.sz-_validWriteBytes;
	  var int i;
	  for(i=0;(i<frei) && (optr<valid);i++)
	  {
			_writeBuffer[i+_validWriteBytes]=outbuf[optr];
			optr++;
	  }
	  _validWriteBytes=_validWriteBytes+i;
	  if(_validWriteBytes == _writeBuffer.sz)
	  {
		  if(_socket.send(_writeBuffer,_writeBuffer.sz)!=_validWriteBytes)
		  {return -2;}
		  _validWriteBytes=0;
	  }
  }
  while(valid != optr);
  return 1;
}

int BufferedSocket::send(*char outbuf[],int valid)
{
  var char buffer[1024];
  var int optr=0;
  while(optr<valid)
  {
	  var int optr2=0;
	  while((optr2<buffer.sz) && (optr<valid))
	  {
			buffer[optr2]=outbuf[optr];
			optr2++;
			optr++;
	  }
	  var int ret=this.send(buffer,optr2);
	  if(ret != 1){return ret;}
  }
  return 1;
}

int BufferedSocket::flush()
{
  if(_socket.send(_writeBuffer,_validWriteBytes)!=_validWriteBytes)
  {
		_validWriteBytes = 0;
		return -3;
  }
  _validWriteBytes = 0;
  return 1;
}

int BufferedSocket::isConnected()
{
	 if(_socket==NULL){return 0;}
	 return _socket.isConnected();
}


Socket::~Socket()
{
    this.close();
}


void Socket::gegenseite(&String_16 adresse)
{
    adresse.clear();
    inline_cpp[[
       struct sockaddr_in peer;
       int peer_len;
       peer_len = sizeof(peer);
       char sStack[1];
       if (getpeername(_handle, (sockaddr*)&peer, (socklen_t*)&peer_len) == -1) 
       {
           perror("getpeername() failed");
           return;
       }
       char* s = inet_ntoa(peer.sin_addr);
       int portNr = ntohs(peer.sin_port);
       int i;
       for(i=0; (i < 100) && (s[i] != 0); i++)
       {
           char z = s[i];
           adresse.append(sStack,z);
       }
    ]]
}

void BufferedSocket::gegenseite(&String_16 adresse)
{
   _socket.gegenseite(adresse);
}

int BufferedSocket::leseZeile(&String_16 zeile)
{
    //var PrintfClass pfc;
    zeile.clear();
    var char CR = cast(char,13);
    var char z = 'X';
    while((this.recvChar(z) == 1) && (z != CR) && (z != '\n') )
    {
        zeile.append(z);
    }
    //pfc.fstr("leseZeile: $").sa(zeile).pr();
    if(z==CR)
    {
        this.recvChar(z);//'\n' lesen (also \r\n insgesamt)
        //var PrintfClass pfc;
        //pfc.fstr("leseZeile: Rest >$<").sa(z).pr();
        return 1;
    }
    else
    {
       if(z=='\n')
       { return 1; }
    }
    if(zeile.length() > 0){ return 1; }
    return 0;
}

void BufferedSocket::close()
{
   _socket.close();
   _readBuffer=NULL;
   _readPtr=0;
   _writeBuffer=NULL;
   _validReadBytes=0;
   _validWriteBytes=0;
}

 
